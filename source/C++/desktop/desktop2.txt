#include <windows.h>
#include <list>
#include <string>
#include <io.h>
#include <shlobj.h>
#include <shellapi.h>

using namespace std;

struct deskEntry
{
	string fileName;
	POINT pos;
};

struct specialEntry
{
	string fileName;
	string param;
	string desc;
	POINT pos;
};

list <deskEntry> entries;
list <specialEntry> specialEntries;
char* deskpath=new char[MAX_PATH];
int x=10,y=10,lasty=y;
HINSTANCE hInst;
typedef list<deskEntry>::iterator dit;
typedef list<specialEntry>::iterator sit;
BOOL oneclick;

LRESULT CALLBACK WndProc(HWND,UINT,WPARAM,LPARAM);
VOID RebuildView(HWND hWnd);

void ClickProcedure(HWND hWnd,LPARAM lParam)
{
	int mousex,mousey;
	sit j;
	dit i;
	mousex=LOWORD(lParam);
	mousey=HIWORD(lParam);
	for(i=entries.begin();i!=entries.end();i++)
		if(mousex >= (*i).pos.x && mousey >= (*i).pos.y && mousex <= (*i).pos.x+32 && mousey <= (*i).pos.y+32)
		{
			string fullpath(deskpath);
			fullpath=fullpath+"\\"+(*i).fileName;
			if((GetFileAttributes(fullpath.c_str()) & FILE_ATTRIBUTE_DIRECTORY)==FILE_ATTRIBUTE_DIRECTORY)
			{
				fullpath="\""+fullpath+"\"";
				ShellExecute(hWnd,"open","s_file.exe",fullpath.c_str(),"",SW_SHOW);
			}
			else
			{
				ShellExecute(hWnd,"open",(*i).fileName.c_str(),"",deskpath,SW_SHOW);
			}
		}
	for(j=specialEntries.begin();j!=specialEntries.end();i++)
		if(mousex >= (*j).pos.x && mousey >= (*j).pos.y && mousex <= (*j).pos.x+32 && mousey <= (*j).pos.y+32)
		{
			string fullpath(deskpath);
			fullpath=fullpath+"\\"+(*j).fileName;
			if((GetFileAttributes(fullpath.c_str()) & FILE_ATTRIBUTE_DIRECTORY)==FILE_ATTRIBUTE_DIRECTORY)
			{
				fullpath="\""+fullpath+"\"";
				ShellExecute(hWnd,"open","s_file.exe",fullpath.c_str(),"",SW_SHOW);
			}
			else
			{
				ShellExecute(hWnd,"open",(*j).fileName.c_str(),(*j).param.c_str(),deskpath,SW_SHOW);
			}
		}
}

int APIENTRY WinMain(HINSTANCE hInstance,HINSTANCE,LPSTR,int)
{
/*	char* buf=new char[MAX_PATH+1];
	GetCurrentDirectory(MAX_PATH,buf);
	lstrcat(buf,"\\sw_conf.ini");
	int res=GetPrivateProfileInt("All","One Click",0,buf);*/
	HKEY hKey;
	DWORD res=0;
	if(RegOpenKeyEx(HKEY_CURRENT_USER,"Software\\StabWin\\Desktop",0,KEY_READ,&hKey)==ERROR_SUCCESS)
	{
		DWORD size=sizeof(res);
		RegQueryValueEx(hKey,"One Click",0,0,(BYTE*)&res,&size);
		RegCloseKey(hKey);
	}
	if(res)	oneclick=TRUE;
	else oneclick=FALSE;
//	delete [] buf;

	hInst=hInstance;
	WNDCLASS wc;
	wc.cbClsExtra=0;
	wc.cbWndExtra=0;
	wc.hbrBackground=(HBRUSH) COLOR_WINDOW;
	wc.hCursor=LoadCursor(0,IDC_ARROW);
	wc.hIcon=LoadIcon(0,IDI_WINLOGO);
	wc.hInstance=hInstance;
	wc.lpfnWndProc=WndProc;
	wc.lpszClassName="WinProg";
	wc.lpszMenuName=0;
	if(!oneclick) wc.style=CS_DBLCLKS;
	else wc.style=0;

	RegisterClass(&wc);

	HWND hWindow;
	hWindow=CreateWindow("WinProg","Desktop",WS_OVERLAPPED|WS_SIZEBOX,0,0,GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN)-150,0,0,hInstance,0);

	SetTimer(hWindow,1001,5000,NULL);

	ShowWindow(hWindow,SW_SHOW);
	UpdateWindow(hWindow);

	MSG msg;
	while(GetMessage(&msg,0,0,0))
	{
		DispatchMessage(&msg);
	}
	return msg.wParam;
}
LRESULT CALLBACK WndProc(HWND hWnd,UINT uiMsg,WPARAM wParam,LPARAM lParam)
{
	dit i;
	string fullpath(deskpath);
	switch(uiMsg)
	{
	case WM_CREATE:
		RebuildView(hWnd);
		return 0;
	case WM_KEYDOWN:
		if(wParam==116)
		{
			RebuildView(hWnd);
		}
		return 0;
	case WM_WINDOWPOSCHANGING:
		LPWINDOWPOS pWinpos;
		pWinpos=(LPWINDOWPOS)lParam;
		pWinpos->hwndInsertAfter=HWND_BOTTOM;
		return 0;
	case WM_PAINT:
		SHFILEINFO shfi;
		char* path;
		path=new char[MAX_PATH];
		HDC dc;
		PAINTSTRUCT ps;
		RECT r;
		dc=BeginPaint(hWnd,&ps);
		sit j;
		for(j=entries.begin();j!=entries.end();j++)
		{
			SHGetFileInfo((*j).fileName.c_str(),0,&shfi,sizeof(shfi),SHGFI_ICON);
			DrawIcon(dc,(*j).pos.x,(*j).pos.y,shfi.hIcon);

			SetRect(&r,(*j).pos.x-5,(*j).pos.y+37,(*j).pos.x+190,(*j).pos.y+92);
			DrawText(dc,(*j).desc.c_str(),-1,&r,DT_LEFT);
		}
		for(i=entries.begin();i!=entries.end();i++)
		{
			lstrcpy(path,deskpath);
			lstrcat(path,"\\");
			lstrcat(path,(*i).fileName.c_str());
			SHGetFileInfo(path,0,&shfi,sizeof(shfi),SHGFI_ICON);
			DrawIcon(dc,(*i).pos.x,(*i).pos.y,shfi.hIcon);

			SetRect(&r,(*i).pos.x-5,(*i).pos.y+37,(*i).pos.x+190,(*i).pos.y+92);
			char* show;
			show=new char[21];
			char* work=new char[(*i).fileName.length()+1];
			lstrcpy(work,(*i).fileName.c_str());
			if(lstrlen(work)>18)
			{
				for(int i=0;i<18;i++)
					show[i]=work[i];
				show[18]='.';
				show[19]='.';
				show[20]='.';
				show[21]='\0';
			}
			else
			{
				lstrcpy(show,work);
			}
			DrawText(dc,show,-1,&r,DT_LEFT);
			delete [] work;
			delete [] show;
		}
		delete [] path;
		EndPaint(hWnd,&ps);
		return 0;
	case WM_LBUTTONDBLCLK:
		if(!oneclick) ClickProcedure(hWnd,lParam);
		return 0;
	case WM_LBUTTONDOWN:
		if(oneclick) ClickProcedure(hWnd,lParam);
		return 0;
	case WM_RBUTTONDOWN:
		fullpath="\""+fullpath+"\"";
		ShellExecute(hWnd,"open","s_file.exe",fullpath.c_str(),"",SW_SHOW);
		return 0;
	case WM_DESTROY:
		delete [] deskpath;
		PostQuitMessage(0);
		return 0;
	default:
		return DefWindowProc(hWnd,uiMsg,wParam,lParam);
	}
}

VOID RebuildView(HWND hWnd)
{
	specialEntries.clear();
	dit i;
	deskEntry e;
	entries.clear();
	x=10;
	y=10;
	lasty=y;
	
	HKEY hKey;
	if(RegOpenKeyEx(HKEY_CURRENT_USER,"Software\\StabWin\\Desktop",0,KEY_READ,&hKey)==ERROR_SUCCESS)
	{
		DWORD res=0;
		DWORD size=sizeof(res);
		RegQueryValueEx(hKey,"Arbeitsplatz",0,0,(BYTE*)&res,&size);
		if(res)
		{
			specialEntries.
	int res;
	res=0;
	long sh;
	_finddata_t fd;
	char* searchpath;
	searchpath=new char[MAX_PATH+4];
	SHGetSpecialFolderPath(hWnd,deskpath,CSIDL_DESKTOPDIRECTORY,true);
	lstrcpy(searchpath,deskpath);
	lstrcat(searchpath,"\\*.*");
	sh=_findfirst(searchpath,&fd);

	if(sh!=-1) res=0;
	while(res==0)
	{
		if(lstrcmp(fd.name,".")!=0 && lstrcmp(fd.name,"..")!=0 && (GetFileAttributes(fd.name) & FILE_ATTRIBUTE_HIDDEN)==FILE_ATTRIBUTE_HIDDEN)
		{
			e.pos.x=x;
			e.pos.y=y;
			if(y>lasty)
			{
				lasty=y;
			}
			e.fileName=fd.name;
			entries.push_back(e);
			y=y+62;
			if(y>(GetSystemMetrics(SM_CYSCREEN)-215))
			{
				y=10;
				x=x+200;
			}
		}
		res=_findnext(sh,&fd);
	}
		_findclose(sh);
	delete [] searchpath;
	SetWindowPos(hWnd,0,0,0,x+200,lasty+100,0);
	InvalidateRect(hWnd,NULL,TRUE);
}