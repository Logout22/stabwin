#include <windows.h>
#include <list>
#include <string>
#include <io.h>
#include <shlobj.h>
#include <shellapi.h>

using namespace std;

struct deskEntry
{
	string fileName;
	POINT pos;
};

list <deskEntry> entries;
char* deskpath=new char[MAX_PATH];
int x=10,y=10,lasty=y;
HINSTANCE hInst;
typedef list<deskEntry>::iterator dit;
BOOL oneclick;

LRESULT CALLBACK WndProc(HWND,UINT,WPARAM,LPARAM);

void ClickProcedure(HWND hWnd,LPARAM lParam)
{
		int mousex,mousey;
		dit i;
		mousex=LOWORD(lParam);
		mousey=HIWORD(lParam);
		for(i=entries.begin();i!=entries.end();i++)
			if(mousex >= (*i).pos.x && mousey >= (*i).pos.y && mousex <= (*i).pos.x+32 && mousey <= (*i).pos.y+32)
				ShellExecute(hWnd,"open",(*i).fileName.c_str(),"",deskpath,SW_SHOW);
}

int APIENTRY WinMain(HINSTANCE hInstance,HINSTANCE,LPSTR,int)
{
	char* buf=new char[MAX_PATH+1];
	GetCurrentDirectory(MAX_PATH,buf);
	lstrcat(buf,"\\sw_conf.ini");
	int res=GetPrivateProfileInt("All","One Click",0,buf);
	if(res==0)
		oneclick=FALSE;
	if(res==1)
		oneclick=TRUE;
	delete [] buf;
	
	hInst=hInstance;
	WNDCLASS wc;
	wc.cbClsExtra=0;
	wc.cbWndExtra=0;
	wc.hbrBackground=(HBRUSH) COLOR_WINDOW;
	wc.hCursor=LoadCursor(0,IDC_ARROW);
	wc.hIcon=LoadIcon(0,IDI_WINLOGO);
	wc.hInstance=hInstance;
	wc.lpfnWndProc=WndProc;
	wc.lpszClassName="WinProg";
	wc.lpszMenuName=0;
	if(!oneclick) wc.style=CS_DBLCLKS;
	else wc.style=0;

	RegisterClass(&wc);

	HWND hWindow;
	hWindow=CreateWindow("WinProg","Desktop",WS_OVERLAPPED,0,0,GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN)-150,0,0,hInstance,0);

	ShowWindow(hWindow,SW_SHOW);
	UpdateWindow(hWindow);

	MSG msg;
	while(GetMessage(&msg,0,0,0))
	{
		DispatchMessage(&msg);
	}
	return msg.wParam;
}
LRESULT CALLBACK WndProc(HWND hWnd,UINT uiMsg,WPARAM wParam,LPARAM lParam)
{
	dit i;
	deskEntry e;
	switch(uiMsg)
	{
	case WM_CREATE:
		int res;
		res=0;
		long sh;
		_finddata_t fd;
		char* searchpath;
		searchpath=new char[MAX_PATH+4];
		SHGetSpecialFolderPath(hWnd,deskpath,CSIDL_DESKTOPDIRECTORY,true);
		lstrcpy(searchpath,deskpath);
		lstrcat(searchpath,"\\*.*");
		sh=_findfirst(searchpath,&fd);
		
		if(sh!=-1) res=0;
		while(res==0)
		{
			if(lstrcmp(fd.name,".")!=0 && lstrcmp(fd.name,"..")!=0)
			{
				e.pos.x=x;
				e.pos.y=y;
				e.fileName=fd.name;
				entries.push_back(e);
				y=y+62;
				if(y>(GetSystemMetrics(SM_CYSCREEN)-212))
				{
					lasty=y;
					y=10;
					x=x+200;
				}
			}
			res=_findnext(sh,&fd);
		}

		_findclose(sh);
		delete [] searchpath;
		SetWindowPos(hWnd,0,0,0,x+200,lasty+40,0);
		
		return 0;
	case WM_PAINT:
		SHFILEINFO shfi;
		char* path;
		path=new char[MAX_PATH];
		HDC dc;
		PAINTSTRUCT ps;
		RECT r;
		dc=BeginPaint(hWnd,&ps);
		for(i=entries.begin();i!=entries.end();i++)
		{
			lstrcpy(path,deskpath);
			lstrcat(path,"\\");
			lstrcat(path,(*i).fileName.c_str());
			SHGetFileInfo(path,0,&shfi,sizeof(shfi),SHGFI_ICON);
			DrawIcon(dc,(*i).pos.x,(*i).pos.y,shfi.hIcon);
			
			SetRect(&r,(*i).pos.x-5,(*i).pos.y+37,(*i).pos.x+190,(*i).pos.y+92);
			char* show;
			show=new char[21];
			char* work=new char[(*i).fileName.length()+1];
			lstrcpy(work,(*i).fileName.c_str());
			if(lstrlen(work)>18)
			{
				for(int i=0;i<18;i++)
					show[i]=work[i];
				show[18]='.';
				show[19]='.';
				show[20]='.';
				show[21]='\0';
			}
			else
			{
				lstrcpy(show,work);
			}
			DrawText(dc,show,-1,&r,DT_LEFT);
			delete [] work;
			delete [] show;
		}
		delete [] path;
		EndPaint(hWnd,&ps);
		return 0;
	case WM_LBUTTONDBLCLK:
		if(!oneclick) ClickProcedure(hWnd,lParam);
		return 0;
	case WM_LBUTTONDOWN:
		if(oneclick) ClickProcedure(hWnd,lParam);
		return 0;
	case WM_DESTROY:
		delete [] deskpath;
		PostQuitMessage(0);
		return 0;
	default:
		return DefWindowProc(hWnd,uiMsg,wParam,lParam);
	}
}
